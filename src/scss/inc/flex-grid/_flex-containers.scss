.#{$flexContainer} {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	box-sizing: border-box;
	margin: 0 $defaultGutter / -2;

	&.vert-direction {
		flex-direction: column;
	}

	* {
		box-sizing: border-box;
	}

	img {
		max-width: 100%;
		max-height: 100%;
	}
}

//prevent gutters inconsistence in nested flex elements

.#{$flexItem} > .#{$flexContainer} {
	width: calc(100% + #{$defaultGutter});
}

.#{$flexContainer} .#{$flexContainer} {
	margin: $defaultGutter / -2;
}

@for $currentRelWidth from 1 through $maxCol {
	.#{$flexContainer}.cont-#{$currentRelWidth} > .#{$flexItem} {
		width: #{( $currentRelWidth * 100% / $maxCol)};
	}
}

@each $bp-el in $breakpoint-list {

	$currentPxWidth: 	nth($bp-el,1);
	$currentGutter: 	nth($bp-el,2);
	$currentViewSlug: 	nth($bp-el,3);

	.#{$flexContainer} .#{$flexContainer} {
		@include susy-breakpoint($currentPxWidth) {
			margin: $currentGutter / -2;
		}
	}

	//prevent gutters inconsistence in nested flex elements

	.#{$flexItem} > .#{$flexContainer} {
		@include susy-breakpoint($currentPxWidth) {
			// height: calc(100% + #{$currentGutter});
			width: calc(100% + #{$currentGutter});
		}
	}

	//Containers bp definitions

	@for $currentRelWidth from 1 through $maxCol {
		.#{$flexContainer}.cont-#{$currentViewSlug}-#{$currentRelWidth} > .#{$flexItem} {
			@include susy-breakpoint($currentPxWidth) {
				width: #{( $currentRelWidth * 100% / $maxCol)};
			}
		}
	}
}
